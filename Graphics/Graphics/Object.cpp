#include "Object.h"
#include "Shader.h"

//======================================================================================================
Object::Object(Object* parent)
{
	m_priority = 0;
	m_parent = parent;

	m_isLit = false;
	m_isAlive = true;
	m_isActive = true;
	m_isVisible = true;
	m_isTextured = false;

	m_normalMatrix = glm::mat3(1.0f);
}
//======================================================================================================
bool Object::IsLit() const
{
	return m_isLit;
}
//======================================================================================================
bool Object::IsAlive() const
{
	return m_isAlive;
}
//======================================================================================================
bool Object::IsActive() const
{
	return m_isActive;
}
//======================================================================================================
bool Object::IsVisible() const
{
	return m_isVisible;
}
//======================================================================================================
bool Object::IsTextured() const
{
	return m_isTextured;
}
//======================================================================================================
void Object::IsLit(bool flag)
{
	m_isLit = flag;
}
//======================================================================================================
void Object::IsAlive(bool flag)
{
	m_isAlive = flag;
}
//======================================================================================================
void Object::IsActive(bool flag)
{
	m_isActive = flag;
}
//======================================================================================================
void Object::IsVisible(bool flag)
{
	m_isVisible = flag;
}
//======================================================================================================
void Object::IsTextured(bool flag)
{
	m_isTextured = flag;
}
//======================================================================================================
GLuint Object::GetPriority() const
{
	return m_priority;
}
//======================================================================================================
const std::string& Object::GetTag()
{
	return m_tag;
}
//======================================================================================================
Transform& Object::GetTransform()
{
	return m_transform;
}
//======================================================================================================
void Object::SetPriority(GLuint priority)
{
	m_priority = priority;
}
//======================================================================================================
void Object::SetTag(const std::string& tag)
{
	m_tag = tag;
}